>>> from proto_inspect import *

Create a basic message

>>> m = ProtoMessage()
>>> m
ProtoMessage([])

Adding a field is pretty easy:

>>> m.fields.append(Field(5, Varint(55), excess_tag_bytes=1))
>>> m
ProtoMessage([Field(5, Varint(55), excess_tag_bytes=1)])

Pretty printing works:

>>> m.pretty_print()
ProtoMessage([
    Field(5, Varint(55), excess_tag_bytes=1),
])

Accessing by index works:

>>> m[5]
Varint(55)
>>> m[5].value
55
>>> m[5].signed
-28

Fields can also be set by index:

>>> m = ProtoMessage()
>>> m[5] = [Blob(b'hello'), Blob(b'world')]
>>> m
ProtoMessage([Field(5, Blob(b'hello')), Field(5, Blob(b'world'))])
>>> m[5] = Varint(55)
>>> m
ProtoMessage([Field(5, Varint(55))])
>>> m.field_list(5)[0].excess_tag_bytes = 1
>>> m
ProtoMessage([Field(5, Varint(55), excess_tag_bytes=1)])

Serializing the message works:

>>> m.serialize().hex()
'a80037'

Parsing the message back works, too:

>>> def objects_are_same(a, b):
...     assert a == b, 'equality'
...     assert a.serialize() == b.serialize(), 'serialized equality'
...     assert repr(a) == repr(b), 'repr equality'
...     assert a.repr_pretty() == b.repr_pretty(), 'pretty equality'
...     return True
...
>>> reparsed = ProtoMessage.parse(m.serialize())
>>> objects_are_same(m, reparsed)
True

We can add some extra garbage bytes:

>>> m[5].excess_bytes = 2
>>> m.total_excess_bytes()
3
>>> m.pretty_print()
ProtoMessage([
    Field(5, Varint(55, excess_bytes=2), excess_tag_bytes=1),
])
>>> m.serialize().hex()
'a800b78000'

When comparing values, equality ignores excess bytes...

>>> m == reparsed
True

But the representation isn't the same:

>>> objects_are_same(m, reparsed)
Traceback (most recent call last):
    ...
AssertionError: serialized equality

This is because equality (==) compares only the (known) represented values of
the proto, not the serialized output. In this way, if excess bytes are (for some
terrible reason) an actual concern, you should make sure that all represented
values are parsed and unpacked (for example, nested submessages and packed
repeated fields), otherwise equality testing on two messages that will parse
as equivalent in a typical implementation may falsely tell that they are not.

Both the pretty print and the repr are valid code that exactly reproduce the
object.

>>> def validate_printing(obj):
...     r = repr(obj)
...     pretty = obj.repr_pretty()
...     objects_are_same(obj, eval(r))
...     objects_are_same(obj, eval(pretty))
...     return True
...
>>> validate_printing(m)
True

Stripping all the garbage bytes off the message is easy:

>>> m.strip_excess_bytes()
>>> m.pretty_print()
ProtoMessage([
    Field(5, Varint(55)),
])
>>> m.serialize().hex()
'2837'
>>> validate_printing(m)
True
